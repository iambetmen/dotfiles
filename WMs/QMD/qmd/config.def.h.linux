/* See LICENSE file for copyright and license details. */

/* appearance */
//static const char font[]            = "inconsolata-dz:size=8";
static const char font[]		= "Noto Sans:size=8";
#ifdef DWM_THEME_DEFAULT
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#bbbbbb";
static const char normfgcolor[]     = "#222222";
static const char selbordercolor[]  = "#005577";
static const char selbgcolor[]      = "#eeeeee";
static const char selfgcolor[]      = "#005577";
#endif
#ifdef DWM_THEME_VIOLET
static const char normbordercolor[] = "#222024";
static const char normbgcolor[]     = "#222024";
static const char normfgcolor[]     = "#f2f0f4";
static const char selbordercolor[]  = "#222024";
static const char selbgcolor[]      = "#222024";
static const char selfgcolor[]      = "#727074";
#endif
#ifdef DWM_THEME_SUNBATHER
static const char normbordercolor[] = "#f37b7c";
static const char normbgcolor[]     = "#f37b7c";
static const char normfgcolor[]     = "#e7cd93";
static const char selbordercolor[]  = "#f39b86";
static const char selbgcolor[]      = "#f39b86";
static const char selfgcolor[]      = "#ffffff";
#endif
#ifdef DWM_THEME_POWERLINES
static const char normbordercolor[] = "#9fc2ae";
static const char normbgcolor[]     = "#9fc2ae";
static const char normfgcolor[]     = "#3b2611";
static const char selbordercolor[]  = "#fde177";
static const char selbgcolor[]      = "#9fc2ae";
static const char selfgcolor[]      = "#56675d";
#endif
#ifdef DWM_THEME_SUMMER
static const char normbordercolor[] = "#535077";
static const char normbgcolor[]     = "#9fc2ae";
static const char normfgcolor[]     = "#3b2611";
static const char selbordercolor[]  = "#fde177";
static const char selbgcolor[]      = "#9fc2ae";
static const char selfgcolor[]      = "#56675d";
#endif
#ifdef DWM_THEME_SHAURIS
static const char normbordercolor[] = "#c47a77";
static const char normbgcolor[]     = "#688894";
static const char normfgcolor[]     = "#dbb89c";
static const char selbordercolor[]  = "#dbafad";
static const char selbgcolor[]      = "#a4b7be";
static const char selfgcolor[]      = "#e9d4c3";
#endif

static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const Bool showsystray       = True;     /* False means no systray */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */

/* tagging */
static const char *tags[] = { "˥", "˦", "˧", "˨", "˩" };

static const Rule rules[] = {
	/* class			instance    title       tags mask     isfloating   monitor */
	{ "google-chrome",	        NULL,       NULL,       1<<1,		False,        -1 },
	{ "Firefox",			NULL,       NULL,       1<<1,           False,        -1 },
	{ "Nemo",		        NULL,       NULL,       1<<2,		False,        -1 },
	{ "Spotify",			NULL,	    NULL,	1<<4,		True,         -1 },
	{ "Pcmanfm",			NULL,       NULL,	1<<3,		False,        -1 },
};

/* layout(s) */
static const float mfact      = 0.6; /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;    /* number of clients in master area */
static const Bool resizehints = True; /* True means respect size hints in tiled resizals */

#include "bstack.c"
#include "bstackhoriz.c"
static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "+",      tile },    /* first entry is default */
	{ "-",      NULL },    /* no layout function means floating behavior */
	{ "[ ]",      monocle },
	{ "TT",     bstack },
	{ "==",     bstackhoriz },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *passmenucmd[]={"pass-dmenu", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]  = { "urxvt", NULL };
static const char *browsercmdGC[]={ "google-chrome-stable", NULL };
static const char *browsercmdFF[]={ "firefox", NULL };
static const char *startpageFF[]={ "startpage", NULL };
static const char *spotifycmd[]={ "spotify", NULL };
static const char *filemgrcmd[]={ "pcmanfm", NULL };
static const char *mpvfromclipboard[]={ "mpvclipboard", NULL };
/* fill or scale background */
static const char *rbgcmd[] =   { "feh", "--randomize", "--bg-fill", DWM_WALLPAPERDIR, NULL };
static const char *rbgcmd2[] =  { "feh", "--randomize", "--bg-scale", DWM_WALLPAPERDIR, NULL };

/* begin self-restart function */
#include <unistd.h>
void self_restart(const Arg *arg) {
	
	/* Path to dwm here. Check Makefile! */
	char *const argv[] = {"/usr/bin/dwm", NULL};

	execv(argv[0], argv);
}
/* end self-restart function */

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_p,      spawn,          {.v = passmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {.v = &layouts[3]} },
	{ MODKEY|ShiftMask,             XK_space,  setlayout,	   {.v = &layouts[4]} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
	{ MODKEY,			XK_g,	   spawn,	   {.v = browsercmdFF} },
	{ MODKEY|ShiftMask,		XK_g,	   spawn,	   {.v = browsercmdGC} },
	{ MODKEY,			XK_s,	   spawn,	   {.v = spotifycmd} },
	{ MODKEY,			XK_o,	   spawn,	   {.v = filemgrcmd} },
	{ MODKEY,			XK_w,	   spawn,	   {.v = rbgcmd} },
	{ MODKEY|ShiftMask,		XK_w,	   spawn,	   {.v = rbgcmd2} },
	{ MODKEY,			XK_a,	   spawn,	   {.v = mpvfromclipboard} },
	{ MODKEY,			XK_e,      spawn,	   {.v = startpageFF} },
	{ MODKEY|ShiftMask,		XK_r,	   self_restart,   {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

